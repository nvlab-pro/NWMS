<?php

namespace App\Providers;

use Illuminate\Translation\Translator;
use Illuminate\Translation\FileLoader;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Contracts\Translation\Loader;
use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Log;

class TranslationServiceProvider extends ServiceProvider
{
    public function register()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π TranslationServiceProvider
        if (!$this->app->bound('translator')) {
            return;
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Loader –≤—Ä—É—á–Ω—É—é
        $this->app->singleton(Loader::class, function ($app) {
            return new FileLoader(new Filesystem(), $app['path.lang']);
        });

        // –†–∞—Å—à–∏—Ä—è–µ–º Translator
        $this->app->extend('translator', function ($translator, $app) {
            $loader = $app->make(Loader::class);

            return new class($loader, $app['config']['app.locale']) extends Translator {
                public function get($key, array $replace = [], $locale = null, $fallback = true)
                {
                    $translation = parent::get($key, $replace, $locale, $fallback);

                    if ($translation === $key) {
                        Log::info("üö® –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥: $key");
                    }

                    return $translation;
                }
            };
        });
    }
}
